Resources:
  DocumentCreatedTopicE7326A2E:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: RagAppStack/DocumentCreatedTopic/Resource
  DocumentCreatedQueue2D250ED0:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: RagAppStack/DocumentCreatedQueue/Resource
  DocumentCreatedQueuePolicy62339A24:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Action: sqs:SendMessage
          Condition:
            ArnEquals:
              aws:SourceArn:
                Ref: DocumentCreatedTopicE7326A2E
          Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Resource:
            Fn::GetAtt:
            - DocumentCreatedQueue2D250ED0
            - Arn
        Version: '2012-10-17'
      Queues:
      - Ref: DocumentCreatedQueue2D250ED0
    Metadata:
      aws:cdk:path: RagAppStack/DocumentCreatedQueue/Policy/Resource
  DocumentCreatedQueueRagAppStackDocumentCreatedTopic0C00D5182DABFD4D:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
        - DocumentCreatedQueue2D250ED0
        - Arn
      Protocol: sqs
      TopicArn:
        Ref: DocumentCreatedTopicE7326A2E
    DependsOn:
    - DocumentCreatedQueuePolicy62339A24
    Metadata:
      aws:cdk:path: RagAppStack/DocumentCreatedQueue/RagAppStackDocumentCreatedTopic0C00D518/Resource
  DocumentContentExtractedTopic6F4FCA03:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: RagAppStack/DocumentContentExtractedTopic/Resource
  DocumentContentExtractedQueue4F3E748B:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: RagAppStack/DocumentContentExtractedQueue/Resource
  DocumentContentExtractedQueuePolicy8B703DDD:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Action: sqs:SendMessage
          Condition:
            ArnEquals:
              aws:SourceArn:
                Ref: DocumentContentExtractedTopic6F4FCA03
          Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Resource:
            Fn::GetAtt:
            - DocumentContentExtractedQueue4F3E748B
            - Arn
        Version: '2012-10-17'
      Queues:
      - Ref: DocumentContentExtractedQueue4F3E748B
    Metadata:
      aws:cdk:path: RagAppStack/DocumentContentExtractedQueue/Policy/Resource
  DocumentContentExtractedQueueRagAppStackDocumentContentExtractedTopicAFAA1FCCD1EAB200:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
        - DocumentContentExtractedQueue4F3E748B
        - Arn
      Protocol: sqs
      TopicArn:
        Ref: DocumentContentExtractedTopic6F4FCA03
    DependsOn:
    - DocumentContentExtractedQueuePolicy8B703DDD
    Metadata:
      aws:cdk:path: RagAppStack/DocumentContentExtractedQueue/RagAppStackDocumentContentExtractedTopicAFAA1FCC/Resource
  DocumentContentSummarizedTopicFA85BB5D:
    Type: AWS::SNS::Topic
    Metadata:
      aws:cdk:path: RagAppStack/DocumentContentSummarizedTopic/Resource
  DocumentContentSummarizedQueue7BB1815C:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
    Metadata:
      aws:cdk:path: RagAppStack/DocumentContentSummarizedQueue/Resource
  DocumentContentSummarizedQueuePolicy0FF9FB02:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Action: sqs:SendMessage
          Condition:
            ArnEquals:
              aws:SourceArn:
                Ref: DocumentContentSummarizedTopicFA85BB5D
          Effect: Allow
          Principal:
            Service: sns.amazonaws.com
          Resource:
            Fn::GetAtt:
            - DocumentContentSummarizedQueue7BB1815C
            - Arn
        Version: '2012-10-17'
      Queues:
      - Ref: DocumentContentSummarizedQueue7BB1815C
    Metadata:
      aws:cdk:path: RagAppStack/DocumentContentSummarizedQueue/Policy/Resource
  DocumentContentSummarizedQueueRagAppStackDocumentContentSummarizedTopic0FC5FD5AF9E5931B:
    Type: AWS::SNS::Subscription
    Properties:
      Endpoint:
        Fn::GetAtt:
        - DocumentContentSummarizedQueue7BB1815C
        - Arn
      Protocol: sqs
      TopicArn:
        Ref: DocumentContentSummarizedTopicFA85BB5D
    DependsOn:
    - DocumentContentSummarizedQueuePolicy0FF9FB02
    Metadata:
      aws:cdk:path: RagAppStack/DocumentContentSummarizedQueue/RagAppStackDocumentContentSummarizedTopic0FC5FD5A/Resource
  ExtractDocumentMetadataLambdaServiceRole8EE46DB0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: RagAppStack/ExtractDocumentMetadataLambda/ServiceRole/Resource
  ExtractDocumentMetadataLambda0BC623C3:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket:
          Fn::Sub: cdk-hnb659fds-assets-${AWS::AccountId}-${AWS::Region}
        S3Key: e176934cae34ac052db28682d082423a600d6893d5092fdfc2fe56063dc6e48e.zip
      Handler: extract_document_metadata.handler
      Role:
        Fn::GetAtt:
        - ExtractDocumentMetadataLambdaServiceRole8EE46DB0
        - Arn
      Runtime: python3.12
    DependsOn:
    - ExtractDocumentMetadataLambdaServiceRole8EE46DB0
    Metadata:
      aws:cdk:path: RagAppStack/ExtractDocumentMetadataLambda/Resource
      aws:asset:path: ../../cdk.out/asset.e176934cae34ac052db28682d082423a600d6893d5092fdfc2fe56063dc6e48e
      aws:asset:is-bundled: true
      aws:asset:property: Code
  ExtractDocumentContentLambdaServiceRole79DE766B:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: RagAppStack/ExtractDocumentContentLambda/ServiceRole/Resource
  ExtractDocumentContentLambdaServiceRoleDefaultPolicyF5DC98BE:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - sqs:ChangeMessageVisibility
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:GetQueueUrl
          - sqs:ReceiveMessage
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - DocumentCreatedQueue2D250ED0
            - Arn
        Version: '2012-10-17'
      PolicyName: ExtractDocumentContentLambdaServiceRoleDefaultPolicyF5DC98BE
      Roles:
      - Ref: ExtractDocumentContentLambdaServiceRole79DE766B
    Metadata:
      aws:cdk:path: RagAppStack/ExtractDocumentContentLambda/ServiceRole/DefaultPolicy/Resource
  ExtractDocumentContentLambdaFB33DDDB:
    Type: AWS::Lambda::Function
    Properties:
      Code: ExtractDocumentContentLambdaFB33DDDB
      Handler: extract_document_content.handler
      Role:
        Fn::GetAtt:
        - ExtractDocumentContentLambdaServiceRole79DE766B
        - Arn
      Runtime: python3.12
    DependsOn:
    - ExtractDocumentContentLambdaServiceRoleDefaultPolicyF5DC98BE
    - ExtractDocumentContentLambdaServiceRole79DE766B
    Metadata:
      SamNormalized: true
      SamResourceId: ExtractDocumentContentLambda
      aws:asset:is-bundled: false
      aws:asset:path: ../../cdk.out/asset.18f036c673c58fb1eafa43e09c9724df5870ad77f11f14fa29cb868c2e7ec03a
      aws:asset:property: Code
      aws:cdk:path: RagAppStack/ExtractDocumentContentLambda/Resource
  ExtractDocumentContentLambdaSqsEventSourceRagAppStackDocumentCreatedQueue4914A4B0BA127E09:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
        - DocumentCreatedQueue2D250ED0
        - Arn
      FunctionName:
        Ref: ExtractDocumentContentLambdaFB33DDDB
    Metadata:
      aws:cdk:path: RagAppStack/ExtractDocumentContentLambda/SqsEventSource:RagAppStackDocumentCreatedQueue4914A4B0/Resource
  SummarizeDocumentContentLambdaServiceRole7948E15A:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: RagAppStack/SummarizeDocumentContentLambda/ServiceRole/Resource
  SummarizeDocumentContentLambdaServiceRoleDefaultPolicy0E099750:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - sqs:ChangeMessageVisibility
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:GetQueueUrl
          - sqs:ReceiveMessage
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - DocumentContentExtractedQueue4F3E748B
            - Arn
        Version: '2012-10-17'
      PolicyName: SummarizeDocumentContentLambdaServiceRoleDefaultPolicy0E099750
      Roles:
      - Ref: SummarizeDocumentContentLambdaServiceRole7948E15A
    Metadata:
      aws:cdk:path: RagAppStack/SummarizeDocumentContentLambda/ServiceRole/DefaultPolicy/Resource
  SummarizeDocumentContentLambda730A2683:
    Type: AWS::Lambda::Function
    Properties:
      Code: SummarizeDocumentContentLambda730A2683
      Handler: summarize_document_content.handler
      Role:
        Fn::GetAtt:
        - SummarizeDocumentContentLambdaServiceRole7948E15A
        - Arn
      Runtime: python3.12
    DependsOn:
    - SummarizeDocumentContentLambdaServiceRoleDefaultPolicy0E099750
    - SummarizeDocumentContentLambdaServiceRole7948E15A
    Metadata:
      SamNormalized: true
      SamResourceId: SummarizeDocumentContentLambda
      aws:asset:is-bundled: false
      aws:asset:path: ../../cdk.out/asset.18f036c673c58fb1eafa43e09c9724df5870ad77f11f14fa29cb868c2e7ec03a
      aws:asset:property: Code
      aws:cdk:path: RagAppStack/SummarizeDocumentContentLambda/Resource
  SummarizeDocumentContentLambdaSqsEventSourceRagAppStackDocumentContentExtractedQueue905ECF9D2C37FAD1:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
        - DocumentContentExtractedQueue4F3E748B
        - Arn
      FunctionName:
        Ref: SummarizeDocumentContentLambda730A2683
    Metadata:
      aws:cdk:path: RagAppStack/SummarizeDocumentContentLambda/SqsEventSource:RagAppStackDocumentContentExtractedQueue905ECF9D/Resource
  GenerateSummarizedContentEmbeddingsLambdaServiceRole35D2C3A0:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: RagAppStack/GenerateSummarizedContentEmbeddingsLambda/ServiceRole/Resource
  GenerateSummarizedContentEmbeddingsLambdaServiceRoleDefaultPolicy575EF96A:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - sqs:ChangeMessageVisibility
          - sqs:DeleteMessage
          - sqs:GetQueueAttributes
          - sqs:GetQueueUrl
          - sqs:ReceiveMessage
          Effect: Allow
          Resource:
            Fn::GetAtt:
            - DocumentContentSummarizedQueue7BB1815C
            - Arn
        Version: '2012-10-17'
      PolicyName: GenerateSummarizedContentEmbeddingsLambdaServiceRoleDefaultPolicy575EF96A
      Roles:
      - Ref: GenerateSummarizedContentEmbeddingsLambdaServiceRole35D2C3A0
    Metadata:
      aws:cdk:path: RagAppStack/GenerateSummarizedContentEmbeddingsLambda/ServiceRole/DefaultPolicy/Resource
  GenerateSummarizedContentEmbeddingsLambda60ED76D5:
    Type: AWS::Lambda::Function
    Properties:
      Code: GenerateSummarizedContentEmbeddingsLambda60ED76D5
      Handler: generate_summarized_content_embeddings.handler
      Role:
        Fn::GetAtt:
        - GenerateSummarizedContentEmbeddingsLambdaServiceRole35D2C3A0
        - Arn
      Runtime: python3.12
    DependsOn:
    - GenerateSummarizedContentEmbeddingsLambdaServiceRoleDefaultPolicy575EF96A
    - GenerateSummarizedContentEmbeddingsLambdaServiceRole35D2C3A0
    Metadata:
      SamNormalized: true
      SamResourceId: GenerateSummarizedContentEmbeddingsLambda
      aws:asset:is-bundled: false
      aws:asset:path: ../../cdk.out/asset.18f036c673c58fb1eafa43e09c9724df5870ad77f11f14fa29cb868c2e7ec03a
      aws:asset:property: Code
      aws:cdk:path: RagAppStack/GenerateSummarizedContentEmbeddingsLambda/Resource
  GenerateSummarizedContentEmbeddingsLambdaSqsEventSourceRagAppStackDocumentContentSummarizedQueue7BDDBA8C99176029:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
        - DocumentContentSummarizedQueue7BB1815C
        - Arn
      FunctionName:
        Ref: GenerateSummarizedContentEmbeddingsLambda60ED76D5
    Metadata:
      aws:cdk:path: RagAppStack/GenerateSummarizedContentEmbeddingsLambda/SqsEventSource:RagAppStackDocumentContentSummarizedQueue7BDDBA8C/Resource
  RAGDocumentsNotifications1A5DF48F:
    Type: Custom::S3BucketNotifications
    Properties:
      ServiceToken:
        Fn::GetAtt:
        - BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691
        - Arn
      BucketName: rag-docs-s3-bucket
      NotificationConfiguration:
        LambdaFunctionConfigurations:
        - Events:
          - s3:ObjectCreated:*
          LambdaFunctionArn:
            Fn::GetAtt:
            - ExtractDocumentMetadataLambda0BC623C3
            - Arn
      Managed: false
      SkipDestinationValidation: false
    DependsOn:
    - RAGDocumentsAllowBucketNotificationsToRagAppStackExtractDocumentMetadataLambda7904B456CFF5001E
    Metadata:
      aws:cdk:path: RagAppStack/RAGDocuments/Notifications/Resource
  RAGDocumentsAllowBucketNotificationsToRagAppStackExtractDocumentMetadataLambda7904B456CFF5001E:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - ExtractDocumentMetadataLambda0BC623C3
        - Arn
      Principal: s3.amazonaws.com
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn:
        Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :s3:::rag-docs-s3-bucket
    Metadata:
      aws:cdk:path: RagAppStack/RAGDocuments/AllowBucketNotificationsToRagAppStackExtractDocumentMetadataLambda7904B456
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Fn::Join:
        - ''
        - - 'arn:'
          - Ref: AWS::Partition
          - :iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Metadata:
      aws:cdk:path: RagAppStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - s3:GetBucketNotification
          - s3:PutBucketNotification
          Effect: Allow
          Resource: '*'
        Version: '2012-10-17'
      PolicyName: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
      Roles:
      - Ref: BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: RagAppStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Role/DefaultPolicy/Resource
  BucketNotificationsHandler050a0587b7544547bf325f094a3db8347ECC3691:
    Type: AWS::Lambda::Function
    Properties:
      Description: AWS CloudFormation handler for "Custom::S3BucketNotifications"
        resources (@aws-cdk/aws-s3)
      Code:
        ZipFile: "import boto3  # type: ignore\nimport json\nimport logging\nimport\
          \ urllib.request\n\ns3 = boto3.client(\"s3\")\n\nEVENTBRIDGE_CONFIGURATION\
          \ = 'EventBridgeConfiguration'\nCONFIGURATION_TYPES = [\"TopicConfigurations\"\
          , \"QueueConfigurations\", \"LambdaFunctionConfigurations\"]\n\ndef handler(event:\
          \ dict, context):\n  response_status = \"SUCCESS\"\n  error_message = \"\
          \"\n  try:\n    props = event[\"ResourceProperties\"]\n    notification_configuration\
          \ = props[\"NotificationConfiguration\"]\n    managed = props.get('Managed',\
          \ 'true').lower() == 'true'\n    skipDestinationValidation = props.get('SkipDestinationValidation',\
          \ 'false').lower() == 'true'\n    stack_id = event['StackId']\n    old =\
          \ event.get(\"OldResourceProperties\", {}).get(\"NotificationConfiguration\"\
          , {})\n    if managed:\n      config = handle_managed(event[\"RequestType\"\
          ], notification_configuration)\n    else:\n      config = handle_unmanaged(props[\"\
          BucketName\"], stack_id, event[\"RequestType\"], notification_configuration,\
          \ old)\n    s3.put_bucket_notification_configuration(Bucket=props[\"BucketName\"\
          ], NotificationConfiguration=config, SkipDestinationValidation=skipDestinationValidation)\n\
          \  except Exception as e:\n    logging.exception(\"Failed to put bucket\
          \ notification configuration\")\n    response_status = \"FAILED\"\n    error_message\
          \ = f\"Error: {str(e)}. \"\n  finally:\n    submit_response(event, context,\
          \ response_status, error_message)\n\ndef handle_managed(request_type, notification_configuration):\n\
          \  if request_type == 'Delete':\n    return {}\n  return notification_configuration\n\
          \ndef handle_unmanaged(bucket, stack_id, request_type, notification_configuration,\
          \ old):\n  def get_id(n):\n    n['Id'] = ''\n    sorted_notifications =\
          \ sort_filter_rules(n)\n    strToHash=json.dumps(sorted_notifications, sort_keys=True).replace('\"\
          Name\": \"prefix\"', '\"Name\": \"Prefix\"').replace('\"Name\": \"suffix\"\
          ', '\"Name\": \"Suffix\"')\n    return f\"{stack_id}-{hash(strToHash)}\"\
          \n  def with_id(n):\n    n['Id'] = get_id(n)\n    return n\n\n  external_notifications\
          \ = {}\n  existing_notifications = s3.get_bucket_notification_configuration(Bucket=bucket)\n\
          \  for t in CONFIGURATION_TYPES:\n    if request_type == 'Update':\n   \
          \     old_incoming_ids = [get_id(n) for n in old.get(t, [])]\n        external_notifications[t]\
          \ = [n for n in existing_notifications.get(t, []) if not get_id(n) in old_incoming_ids]\
          \      \n    elif request_type == 'Delete':\n        external_notifications[t]\
          \ = [n for n in existing_notifications.get(t, []) if not n['Id'].startswith(f\"\
          {stack_id}-\")]\n    elif request_type == 'Create':\n        external_notifications[t]\
          \ = [n for n in existing_notifications.get(t, [])]\n  if EVENTBRIDGE_CONFIGURATION\
          \ in existing_notifications:\n    external_notifications[EVENTBRIDGE_CONFIGURATION]\
          \ = existing_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  if request_type\
          \ == 'Delete':\n    return external_notifications\n\n  notifications = {}\n\
          \  for t in CONFIGURATION_TYPES:\n    external = external_notifications.get(t,\
          \ [])\n    incoming = [with_id(n) for n in notification_configuration.get(t,\
          \ [])]\n    notifications[t] = external + incoming\n\n  if EVENTBRIDGE_CONFIGURATION\
          \ in notification_configuration:\n    notifications[EVENTBRIDGE_CONFIGURATION]\
          \ = notification_configuration[EVENTBRIDGE_CONFIGURATION]\n  elif EVENTBRIDGE_CONFIGURATION\
          \ in external_notifications:\n    notifications[EVENTBRIDGE_CONFIGURATION]\
          \ = external_notifications[EVENTBRIDGE_CONFIGURATION]\n\n  return notifications\n\
          \ndef submit_response(event: dict, context, response_status: str, error_message:\
          \ str):\n  response_body = json.dumps(\n    {\n      \"Status\": response_status,\n\
          \      \"Reason\": f\"{error_message}See the details in CloudWatch Log Stream:\
          \ {context.log_stream_name}\",\n      \"PhysicalResourceId\": event.get(\"\
          PhysicalResourceId\") or event[\"LogicalResourceId\"],\n      \"StackId\"\
          : event[\"StackId\"],\n      \"RequestId\": event[\"RequestId\"],\n    \
          \  \"LogicalResourceId\": event[\"LogicalResourceId\"],\n      \"NoEcho\"\
          : False,\n    }\n  ).encode(\"utf-8\")\n  headers = {\"content-type\": \"\
          \", \"content-length\": str(len(response_body))}\n  try:\n    req = urllib.request.Request(url=event[\"\
          ResponseURL\"], headers=headers, data=response_body, method=\"PUT\")\n \
          \   with urllib.request.urlopen(req) as response:\n      print(response.read().decode(\"\
          utf-8\"))\n    print(\"Status code: \" + response.reason)\n  except Exception\
          \ as e:\n      print(\"send(..) failed executing request.urlopen(..): \"\
          \ + str(e))\n\ndef sort_filter_rules(json_obj):\n  if not isinstance(json_obj,\
          \ dict):\n      return json_obj\n  for key, value in json_obj.items():\n\
          \      if isinstance(value, dict):\n          json_obj[key] = sort_filter_rules(value)\n\
          \      elif isinstance(value, list):\n          json_obj[key] = [sort_filter_rules(item)\
          \ for item in value]\n  if \"Filter\" in json_obj and \"Key\" in json_obj[\"\
          Filter\"] and \"FilterRules\" in json_obj[\"Filter\"][\"Key\"]:\n      filter_rules\
          \ = json_obj[\"Filter\"][\"Key\"][\"FilterRules\"]\n      sorted_filter_rules\
          \ = sorted(filter_rules, key=lambda x: x[\"Name\"])\n      json_obj[\"Filter\"\
          ][\"Key\"][\"FilterRules\"] = sorted_filter_rules\n  return json_obj"
      Handler: index.handler
      Role:
        Fn::GetAtt:
        - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
        - Arn
      Runtime: python3.11
      Timeout: 300
    DependsOn:
    - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleDefaultPolicy2CF63D36
    - BucketNotificationsHandler050a0587b7544547bf325f094a3db834RoleB6FB88EC
    Metadata:
      aws:cdk:path: RagAppStack/BucketNotificationsHandler050a0587b7544547bf325f094a3db834/Resource
  CDKMetadata:
    Type: AWS::CDK::Metadata
    Properties:
      Analytics: v2:deflate64:H4sIAAAAAAAA/+1WS2/bMAz+LdVxUNxHdhhyWpK1QIEV6JoAPRhBoUiMw1WWXElulgn+74MUKW7RbsOwYS/0YCv8SH0iZTLkSXH8Zlj4owO2sQMubgcSl4WfOcZvKdvYG2+VLfxcN8hL8orQ9CzodKUiSmft0nKDjUOtSk9cAMko2oESjUblktgY7TTXkoyIvbOEEsM2F2Atq+AdSLwHs02WK5QOzKWWyJ+DrtGt08aJFtnCQIVaJUEAE+/BOTAfWmghoh19ce8n3Ivf/OHX7qi9s4WPJqUn92hxiRLddo416Nbto/phTTwq8tL43jleenIXJEtGIRcXgeA7QE+0o+gosrrwV1oGj5m1bQ1isiUjTxqDimPD5Jhz3e6vfWcTNoy5yzfUUVIzxSoQkRbjgf4Rth2bZBvd+p1HCTHXl/mInAalT1rnGF+fK4kK9rp8ed9WvoTwT4eQvLp46PMfi+LrvLFkg+80VX0IKdPNddA8OeUpLMTMMQc1KGezw/8x0fNwvMr8x2eHN8xacLYYh4XaYTFp+S24CbNQLqhk9VKwwk9X6qxVMW9o/lF6wrWAlF5rpoQEkxtHqxzWfQv7xYYLenoPys10azhcsKZBVYUxg5kKcr4vmePrGX7OdDX7NAkQquoaldCbHp9qxVtjQPG+8TXauGh/7qA+YyhbE+o7NWG2lCCy1LuS6yT3VvtIOlXcbBvXd9QanEFup1qtsOrb/UsUf0cUsVKeJlqsHzA1WhvmnY5egY36h7NwPxPHwpo5VqWt2bqjRwMmmzUrjg7epkH7MKy7mhs0W7fWKplcRmFfeZm8ozvF4bA4PileH3y0iINUKcXVbv0CkdEiv80LAAA=
    Metadata:
      aws:cdk:path: RagAppStack/CDKMetadata/Default
    Condition: CDKMetadataAvailable
Conditions:
  CDKMetadataAvailable:
    Fn::Or:
    - Fn::Or:
      - Fn::Equals:
        - Ref: AWS::Region
        - af-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-east-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-northeast-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-northeast-2
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-northeast-3
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-south-2
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-southeast-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-southeast-2
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-southeast-3
    - Fn::Or:
      - Fn::Equals:
        - Ref: AWS::Region
        - ap-southeast-4
      - Fn::Equals:
        - Ref: AWS::Region
        - ca-central-1
      - Fn::Equals:
        - Ref: AWS::Region
        - ca-west-1
      - Fn::Equals:
        - Ref: AWS::Region
        - cn-north-1
      - Fn::Equals:
        - Ref: AWS::Region
        - cn-northwest-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-central-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-central-2
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-north-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-south-2
    - Fn::Or:
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-west-1
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-west-2
      - Fn::Equals:
        - Ref: AWS::Region
        - eu-west-3
      - Fn::Equals:
        - Ref: AWS::Region
        - il-central-1
      - Fn::Equals:
        - Ref: AWS::Region
        - me-central-1
      - Fn::Equals:
        - Ref: AWS::Region
        - me-south-1
      - Fn::Equals:
        - Ref: AWS::Region
        - sa-east-1
      - Fn::Equals:
        - Ref: AWS::Region
        - us-east-1
      - Fn::Equals:
        - Ref: AWS::Region
        - us-east-2
      - Fn::Equals:
        - Ref: AWS::Region
        - us-west-1
    - Fn::Equals:
      - Ref: AWS::Region
      - us-west-2
Parameters:
  BootstrapVersion:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cdk-bootstrap/hnb659fds/version
    Description: Version of the CDK Bootstrap resources in this environment, automatically
      retrieved from SSM Parameter Store. [cdk:skip]
Rules:
  CheckBootstrapVersion:
    Assertions:
    - Assert:
        Fn::Not:
        - Fn::Contains:
          - - '1'
            - '2'
            - '3'
            - '4'
            - '5'
          - Ref: BootstrapVersion
      AssertDescription: CDK bootstrap stack version 6 required. Please run 'cdk bootstrap'
        with a recent version of the CDK CLI.
